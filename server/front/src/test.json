{
    "took":26,
    "timed_out":false,
    "_shards":{
       "total":1,
       "successful":1,
       "skipped":0,
       "failed":0
    },
    "hits":{
       "total":{
          "value":1,
          "relation":"eq"
       },
       "max_score":0.2911762,
       "hits":[
          {
             "_index":"documents",
             "_type":"_doc",
             "_id":"WQjr83gBhS_8yyIQVUJx",
             "_score":0.2911762,
             "_source":{
                "title":"Présentation PowerPoint",
                "author":"Jérémy PERROUAULT",
                "content":"\n\nARCHITECTURES WEB\nJérémy PERROUAULT\n1\n\nINTRODUCTION\nLes archis quoi ?\n2\n\nINTRODUCTION –LE WEB\nStructure Internet\nProtocole TCP\n3\n\nINTRODUCTION –L’ARCHITECTE\nN’est pas une star obligé de connaître tout sur tout\nIl est obligé d’en savoir un peu sur tout\nN’est pas un administrateur réseau\n4\n\nINTRODUCTION –ÊTRE ARCHITECTE\nOn est pas là pour\nExpliquer que 10 millions de requêtes ne passeront pas sur un serveur OVH\nApprendre à corriger le foutoir qu’un autre architecte a laissé derrière lui\nEviter les problèmes\n\"Avoidproblemsand you’llneverbethe one whoovercamethem.\" -Richard Bach\n5\n\nINTRODUCTION –LES TECHNOLOGIES\nJEE\nASP\nPHP\nMySQL\nSQL Server\nOracle\nMongoDB\n6\nLinux\nWindows\nNodeJS\nPython\nVarnish\nBackBonesJS\nRuby\nCDN\nSOLR\nApache\nNginx\nMemcached\nIIS\n\nINTRODUCTION –L’ARCHITECTE\nConcevoir la solution dans son ensemble\nAvec les contraintes techniques et budgétaires\nOrganisation et l’imbrication des éléments qui doivent composer la solution\n2 façons de concevoir une application\nLa plus simple qui soit (pas d’anomalies possibles)\nLa plus complexe qui soit (difficile de déceler les anomalies)\n7\n\nINTRODUCTION –L’ARCHITECTE\nFlux\nQui parle à qui, en quelle langue ?\nLogiciels\nQuels composants je vais utiliser, et pourquoi je vais les mettre en place ?\nMatériels\nQuelles machines choisir, et pour quel usage ?\nCombien\nQuel est le budget dont je dispose ?\nDe combien de machines j’ai besoin ?\nDe quelle bande passante la solution que je met en place demandera ?\nDe combien de jours-homme j’ai à ma disposition ?\nAutres\nComment optimiser ?\nComment rendre la solution évolutive ?\nComment débuguer ?\nComment tester ?\nIntégration continue ?\n8\n\nINTRODUCTION –EXEMPLE DE MAUVAISE ARCHI\nUn site lent\nPerte de revenus\nUn site qui tombe\nPerte de trafic ➔perte de revenus\nUne appli bourrée de bugs aléatoires\nAudits et correctifs\nAmélioration de la vitesse avec uniquementdes machines\nPerte de marge\n9\n\nLA QUALITÉ\nLa fiabilité\nLa sécurité\n10\n\nLA QUALITÉ\nL’architecte met en œuvre sa solution\nDoit répondre aux exigences fonctionnelles\nDoit être maintenable\nDoit être évolutive\nDoit être performante\nDoit être sécurisée (voir top 10 des vulnérabilités Web par OWASP)\nDoit être fiable (taux de disponibilité)\n11\n\nTAUX DE DISPONIBILITÉ\nSe calcule en pourcentages\nVarie entre 95% et 99,999 %\n365 jours x 24 heures = 8 760 heures\nUn taux de dispo de X%\nX * 8 760 / 100 = D ➔heures de disponibilité\n8 760 -D = I ➔heures d’indisponibilité\n12\n\nTAUX DE DISPONIBILITÉ\nJ’ai un taux de disponibilité de 98% sur l’année\nA combien d’indisponibilité cela répond ?\n4 heures\n7 jours\n23 heures\n10 jours\n13\n\nTEMPS DE CHARGEMENT\nEn 2016, un benchmark US (Compass) concluait : \"1 seconde de temps \nde chargement supplémentaire pénalise la conversion de 12%\"\nEn 2015, Etam annonçait un gain de 20% de taux de conversion après \nune baisse du temps de réponse moyen de 0,7 seconde par page\nCe n’est pas toujours le trafic qui génère un site lent\nEt il faut prendre en compte toutes les étapes pour arriver jusqu’à la page web\n14\n\nTEMPS DE CHARGEMENT\nRésolution DNS\nEtablir une connexion TCP\nEnvoyer la requête\nRoutage\nProxy ?\nLoadbalancing?\nServeurs de cache ?\nServeurs applicatifs\nBase de données\n15\nGénération de la page HTML\nCompression de la page HTML ?\nEnvoie du flux\nRoutage\nGénération visuelle\nChargement des ressources\nImages, Scripts, Feuilles de style\nExécution du JS\nSans compter sur l’état de la connectivité du client\n\nMETTRE EN CACHE –POURQUOI ?\nEviter de refaire un travail (temps machine) déjà fait\nRépondre plus vite\nParce que la RAM n’est pas un coût excessif\n16\n\nMETTRE EN CACHE\nUtilisation d’un CDN\nCache de base de données (en mémoire ou en fichier)\nDevant un serveur web (Varnish)\nVarnish, sur le port 80\nApache, sur le port 8080\nApplication (Memcached)\nRésultat intermédiaire lors de la génération d’une page (commentaires d’article)\nCe qui peut être commun à plusieurs pages (menu principal)\nUtiliser la session utilisation pour éviter de lire ou écrire en base de données\nRésultat de requêtes longues\nRésultat d’appels aux web services\n...\n17\n\nMETTRE EN CACHE –ATTENTION\nAttention à ne pas exagérer !\nCertaines pages ne peuvent pas être cachées (panier utilisateur)\nLe cache n’est efficace que lorsqu’une même ressource est beaucoup \ndemandée\n18\n\nMETTRE EN CACHE –SOLUTIONS ?\nOptimisation de la génération des pages avec du NoSQL(MongoDB)\nMise en place d’un TTL infini avec un système d’invalidation intelligent\nSavoir quand chaque page est invalidée\nMise en place de crawling\nSimuler un trafic permanent sur le site qu’on garde en cache qu’on va utiliser pour les \nvraies requêtes\n19\n\nPROJET\nProjet de recherche\n20\n\nLE PROJET EN GROUPE\nMettre en place la solution web\nPrésentation de la solution\nOrganisation de tests\nDe performance\nDe fiabilité\nDe sécurité\n21"
             }
          },
          {
            "_index":"documents",
            "_type":"_doc",
            "_id":"WQjr83gBhS_8yyIQVUJx",
            "_score":0.2911762,
            "_source":{
               "title":"Présentation PowerPoint",
               "author":"Jérémy PERROUAULT",
               "content":"\n\nARCHITECTURES WEB\nJérémy PERROUAULT\n1\n\nINTRODUCTION\nLes archis quoi ?\n2\n\nINTRODUCTION –LE WEB\nStructure Internet\nProtocole TCP\n3\n\nINTRODUCTION –L’ARCHITECTE\nN’est pas une star obligé de connaître tout sur tout\nIl est obligé d’en savoir un peu sur tout\nN’est pas un administrateur réseau\n4\n\nINTRODUCTION –ÊTRE ARCHITECTE\nOn est pas là pour\nExpliquer que 10 millions de requêtes ne passeront pas sur un serveur OVH\nApprendre à corriger le foutoir qu’un autre architecte a laissé derrière lui\nEviter les problèmes\n\"Avoidproblemsand you’llneverbethe one whoovercamethem.\" -Richard Bach\n5\n\nINTRODUCTION –LES TECHNOLOGIES\nJEE\nASP\nPHP\nMySQL\nSQL Server\nOracle\nMongoDB\n6\nLinux\nWindows\nNodeJS\nPython\nVarnish\nBackBonesJS\nRuby\nCDN\nSOLR\nApache\nNginx\nMemcached\nIIS\n\nINTRODUCTION –L’ARCHITECTE\nConcevoir la solution dans son ensemble\nAvec les contraintes techniques et budgétaires\nOrganisation et l’imbrication des éléments qui doivent composer la solution\n2 façons de concevoir une application\nLa plus simple qui soit (pas d’anomalies possibles)\nLa plus complexe qui soit (difficile de déceler les anomalies)\n7\n\nINTRODUCTION –L’ARCHITECTE\nFlux\nQui parle à qui, en quelle langue ?\nLogiciels\nQuels composants je vais utiliser, et pourquoi je vais les mettre en place ?\nMatériels\nQuelles machines choisir, et pour quel usage ?\nCombien\nQuel est le budget dont je dispose ?\nDe combien de machines j’ai besoin ?\nDe quelle bande passante la solution que je met en place demandera ?\nDe combien de jours-homme j’ai à ma disposition ?\nAutres\nComment optimiser ?\nComment rendre la solution évolutive ?\nComment débuguer ?\nComment tester ?\nIntégration continue ?\n8\n\nINTRODUCTION –EXEMPLE DE MAUVAISE ARCHI\nUn site lent\nPerte de revenus\nUn site qui tombe\nPerte de trafic ➔perte de revenus\nUne appli bourrée de bugs aléatoires\nAudits et correctifs\nAmélioration de la vitesse avec uniquementdes machines\nPerte de marge\n9\n\nLA QUALITÉ\nLa fiabilité\nLa sécurité\n10\n\nLA QUALITÉ\nL’architecte met en œuvre sa solution\nDoit répondre aux exigences fonctionnelles\nDoit être maintenable\nDoit être évolutive\nDoit être performante\nDoit être sécurisée (voir top 10 des vulnérabilités Web par OWASP)\nDoit être fiable (taux de disponibilité)\n11\n\nTAUX DE DISPONIBILITÉ\nSe calcule en pourcentages\nVarie entre 95% et 99,999 %\n365 jours x 24 heures = 8 760 heures\nUn taux de dispo de X%\nX * 8 760 / 100 = D ➔heures de disponibilité\n8 760 -D = I ➔heures d’indisponibilité\n12\n\nTAUX DE DISPONIBILITÉ\nJ’ai un taux de disponibilité de 98% sur l’année\nA combien d’indisponibilité cela répond ?\n4 heures\n7 jours\n23 heures\n10 jours\n13\n\nTEMPS DE CHARGEMENT\nEn 2016, un benchmark US (Compass) concluait : \"1 seconde de temps \nde chargement supplémentaire pénalise la conversion de 12%\"\nEn 2015, Etam annonçait un gain de 20% de taux de conversion après \nune baisse du temps de réponse moyen de 0,7 seconde par page\nCe n’est pas toujours le trafic qui génère un site lent\nEt il faut prendre en compte toutes les étapes pour arriver jusqu’à la page web\n14\n\nTEMPS DE CHARGEMENT\nRésolution DNS\nEtablir une connexion TCP\nEnvoyer la requête\nRoutage\nProxy ?\nLoadbalancing?\nServeurs de cache ?\nServeurs applicatifs\nBase de données\n15\nGénération de la page HTML\nCompression de la page HTML ?\nEnvoie du flux\nRoutage\nGénération visuelle\nChargement des ressources\nImages, Scripts, Feuilles de style\nExécution du JS\nSans compter sur l’état de la connectivité du client\n\nMETTRE EN CACHE –POURQUOI ?\nEviter de refaire un travail (temps machine) déjà fait\nRépondre plus vite\nParce que la RAM n’est pas un coût excessif\n16\n\nMETTRE EN CACHE\nUtilisation d’un CDN\nCache de base de données (en mémoire ou en fichier)\nDevant un serveur web (Varnish)\nVarnish, sur le port 80\nApache, sur le port 8080\nApplication (Memcached)\nRésultat intermédiaire lors de la génération d’une page (commentaires d’article)\nCe qui peut être commun à plusieurs pages (menu principal)\nUtiliser la session utilisation pour éviter de lire ou écrire en base de données\nRésultat de requêtes longues\nRésultat d’appels aux web services\n...\n17\n\nMETTRE EN CACHE –ATTENTION\nAttention à ne pas exagérer !\nCertaines pages ne peuvent pas être cachées (panier utilisateur)\nLe cache n’est efficace que lorsqu’une même ressource est beaucoup \ndemandée\n18\n\nMETTRE EN CACHE –SOLUTIONS ?\nOptimisation de la génération des pages avec du NoSQL(MongoDB)\nMise en place d’un TTL infini avec un système d’invalidation intelligent\nSavoir quand chaque page est invalidée\nMise en place de crawling\nSimuler un trafic permanent sur le site qu’on garde en cache qu’on va utiliser pour les \nvraies requêtes\n19\n\nPROJET\nProjet de recherche\n20\n\nLE PROJET EN GROUPE\nMettre en place la solution web\nPrésentation de la solution\nOrganisation de tests\nDe performance\nDe fiabilité\nDe sécurité\n21"
            }
         }
       ]
    }
 }
